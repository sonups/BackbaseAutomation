import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
  //  apply plugin: "eclipse"
}
apply plugin: "eclipse"
apply plugin: "java"
dependencies {

	compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'

    // Use JUnit test framework
    compile 'junit:junit:4.12'
	testImplementation 'io.cucumber:cucumber-java8:4.3.0'
	//testCompile group: 'io.rest-assured', name: 'rest-assured', version: '4.0.0'
	testImplementation "io.rest-assured:rest-assured:4.0.0"
	testImplementation "io.rest-assured:rest-assured:4.0.0:sources"
	testImplementation "io.rest-assured:rest-assured:4.0.0:javadoc"
	// https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all
	testImplementation 'org.hamcrest:hamcrest:2.1'
	testImplementation 'org.hamcrest:hamcrest-library:2.1'


}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
               TestLogEvent.PASSED,
               TestLogEvent.SKIPPED,
               TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                   TestLogEvent.FAILED,
                   TestLogEvent.PASSED,
                   TestLogEvent.SKIPPED,
                   TestLogEvent.STANDARD_ERROR,
                   TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }

    
}
